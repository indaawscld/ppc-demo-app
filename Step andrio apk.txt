💡 What is Expo?
Expo is a toolchain built around React Native to help you build mobile apps faster and easier, especially for Android and iOS.

🔧 Expo helps with:
Building apps without Android Studio or Xcode

Generating .apk (Android) and .ipa (iOS) files

Deploying your app for testing via QR code or link

Submitting apps to the Play Store and App Store

💡 What is an ADHOC build?
An ADHOC build is a test version of the app that you don’t publish on the app stores.

🧪 Used for:
QA team or internal testers to try the app before release

Installing on specific devices or via Expo Dev App

🔁 In simple words:
| Term            | Meaning                                                                       |
| --------------- | ----------------------------------------------------------------------------- |
| **Expo**        | A tool that helps you build and test mobile apps quickly and easily.          |
| **ADHOC build** | A test version of the app that you share privately (not public on the store). |

📦 Final output:
You will get:

.apk file – for Android

.ipa file – for iOS
Then you’ll share a link or QR code with your testers using Expo.

$env:NODE_HOME="C:\Users\e24475\nodejs"
$env:PATH="$env:NODE_HOME;$env:PATH"

🔧 Step 1: Create a Sample Expo App
1.1 Install Expo CLI (if not already installed)
Open your terminal and run:
---> npm install -g expo-cli

1.2 Create a New Expo App Locally
You can create a new Expo project by running:
 a. npx create-expo-app ppc-demo-app        (This will create a folder named ppc-demo-app. Once it's created, navigate into the project:)
 b. cd ppc-demo-app
 
 
🔧 1.2. Initialize Git in the Project
git init
git add .
git commit -m "Initial commit"

🔧 1.3. Create a New GitHub Repo
Go to https://github.com/new
Create a repo named: ppc-demo-app (or anything you like)
Do NOT initialize it with README/license, since it's already local.

🔧 1.4. Add Remote and Push Your Project
Run the following:
git remote add origin https://github.com/indaawscld/ppc-demo-app.git
git branch -M main
git push -u origin main

✅ Step 2: Get Your Expo Access Token (for EAS builds)
This token will allow GitHub Actions to run Expo (EAS) builds for you.

Create expo account on the site -->https://expo.dev/signup (emailid indaawscld@gmail.com and username: indaawscld)

2.1. Login to Expo via CLI
In your terminal (PowerShell), run:
-->npx expo login  

[Log in to EAS with email or username (exit and run 'npx expo login --help' for other login options)
√ Email or username ... indaawscld
√ Password ... **********}

--> npx expo whoami
indaawscld

--> Manually get your Expo token:Create token on the expos site (https://expo.dev/accounts/indaawscld/settings/access-tokens)
Token : c7kWxcGvQru6f9wAWvX0gKR3Va3dyaUNNiweLPgq (github-actions)

-->Add the Token to GitHub Secrets:

Go to your GitHub repository → Settings → Secrets and variables → Actions
Click New repository secret
Name: EXPO_TOKEN
Value: c7kWxcGvQru6f9wAWvX0gKR3Va3dyaUNNiweLPgq

🔧 3.1. Create a .github/workflows Directory
--> mkdir -p .github/workflows

🔧 3.2. Create a GitHub Actions Workflow File
Inside the .github/workflows folder, create a file called expo-build.yml.
You can do this in PowerShell by running:
-->New-Item -Path ".github/workflows/expo-build.yml" -ItemType File -Force

🔧 3.3. Define the Workflow for Build
Edit the expo-build.yml file and add the following YAML content to it:

name: Build Android with Expo EAS

on:
  push:
    branches: [main]  # You can change this to any branch you want

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Or match your project's Node version

      - name: Install dependencies
        run: npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Set Expo Token for authentication
        run: echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

      - name: Build Android app
        run: eas build --platform android --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}  # Pass the token to the build process

      - name: Build Android ADHOC app
        run: eas build --platform android --profile preview --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}



✅Explanation of the Workflow:
Triggers: The workflow runs when there is a push to the main branch or a pull request to main.

Steps:

Checkout: Fetches your repo’s code.

Setup Node.js: Ensures the right version of Node.js is available.

Install Dependencies: Installs all necessary packages (like Expo).

Log in to Expo: Uses the Expo token you set up earlier to authenticate with Expo CLI.

Build Android APK: Runs the Expo build command for Android.

Build iOS IPA: Runs the Expo build command for iOS.

Upload Build Artifacts: Uploads the APK/IPA as artifacts (you can download them later).


PS C:\Users\e24475\ppc-demo-app> eas credentials
√ Select platform » Android
√ Using build profile: production
Android Credentials
Project                 ppc-demo-app
Application Identifier  com.indaawscld.ppcdemoapp
No credentials set up yet!

√ What do you want to do? » Keystore: Manage everything needed to build your project
Android Credentials
Project                 ppc-demo-app
Application Identifier  com.indaawscld.ppcdemoapp
No credentials set up yet!

√ What do you want to do? » Set up a new keystore
√ Assign a name to your build credentials: ... Build Credentials Y9ZDc5H5hF
√ Generate a new Android Keystore? ... yes
Detected that you do not have keytool installed locally.
√ Generating keystore in the cloud...
√ Created keystore
√ Created Android build credentials Build Credentials Y9ZDc5H5hF
Press any key to continue... ctrl+C

🔧 3.4. Push the Workflow to GitHub
Once you've added the workflow, commit and push the changes:
git add .github/workflows/expo-build.yml
git commit -m "Add GitHub Actions workflow for Expo Android/iOS builds"
git push


--->eas build --platform android --profile production --non-interactive (imp)








 


